;;; $DOOMDIR/config.el -*- mode: Emacs-Lisp; lexical-binding: t; -*-

(setq user-full-name "Kajetan Puchalski"
      user-mail-address "{{ .email }}")

;; Appearance
(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size {{ .alacritty_font_size }} :weight 'semi-bold))
(setq doom-theme 'doom-one)
(setq display-line-numbers-type 'relative)
(setq fill-column 100)
(setq auto-hscroll-mode 'current-line)
(setq scroll-margin 5)
(setq evil-shift-width 4)
(setq c-basic-offset 4)
(setq tab-width 4)

(set-popup-rules!
  '(("^\\*info" :side right :size 80 :quit nil)
    ("^\\*helpful" :side right :size 80 :select t)
    ("^\\*Help" :side right :size 80)
    ("^\\*eww" :ignore t)))

(after! eglot
  (set-popup-rules!
    '(("^\\*eglot-help" :side right :size 95 :select t))))

;; Org mode
(setq org-directory "~/org/")
(setq org-hierarchical-todo-statistics t)

(load-library "find-lisp")
(setq org-agenda-files
      (find-lisp-find-files "~/org" "\.org$"))

;; Play nice with fish
(setq shell-file-name (executable-find "bash"))
(setq-default vterm-shell (executable-find "fish"))

(setq gc-cons-threshold 100000000)

;; Chezmoi helpers

(defvar doom-chezmoi-config-dir (expand-file-name "~/.local/share/chezmoi/dot_config/doom/"))

(defun open-doom-chezmoi-config ()
  "Browse chezmoi doom config"
  (interactive)
  (doom-project-browse doom-chezmoi-config-dir))

(defun chezmoi-apply ()
  "Apply chezmoi config changes"
  (interactive)
  (shell-command "chezmoi apply"))

(defun reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

;; Custom functions
(defun close-buffer-and-window ()
  "Close the current buffer and the window it's in."
  (interactive)
  (let ((window (selected-window)))
    (kill-buffer)                ;; Kill the current buffer
    (when (window-live-p window) ;; Check if the window is still live
      (delete-window))))         ;; Delete the window if it exists


;; Custom hooks

(add-hook 'rust-mode-hook 'subword-mode)
(add-hook 'elisp-mode-hook 'subword-mode)
(add-hook 'c-mode-hook 'subword-mode)
(add-hook 'python-mode-hook 'subword-mode)

(add-hook 'org-mode 'auto-fill-mode)
(add-hook 'markdown-mode 'auto-fill-mode)

(add-hook 'cpp-mode-hook
          (lambda ()
            (setq-local c-basic-offset 2)))

;; Custom Bindings

(map! :map custom-bindings
      :leader "f p" 'open-doom-chezmoi-config
      :leader "f a" 'chezmoi-apply
      :leader "s c" 'evil-ex-nohighlight
      :leader "k C" 'kill-compilation
      :leader "w w" 'ace-window
      :leader "t S" 'subword-mode)

(map! :map display-bindings
      :leader "d r" 'reposition-window
      :leader "d c" 'recenter-top-bottom)

(map! :map evil-visual-state-map
      "$" 'evil-beginning-of-line
      "#" 'evil-end-of-line
      "gh" 'evil-beginning-of-line
      "gl" 'evil-end-of-line)

(map! :map evil-normal-state-map
      "C-j" 'evil-scroll-line-down
      "C-k" 'evil-scroll-line-up
      "$" 'evil-beginning-of-line
      "#" 'evil-end-of-line
      "gh" 'evil-beginning-of-line
      "gl" 'evil-end-of-line
      "U" 'evil-redo)

;; Package configs

(after! hledger-mode
  (setq hledger-jfile (expand-file-name "~/Documents/Finance/hledger/2024.journal")))

(after! corfu-terminal
  (setq corfu-preselect 'first))

(after! eglot
  (eglot-booster-mode))

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

(after! cc-mode
  (setq c-basic-offset 4)
  (set-eglot-client! 'cc-mode '("clangd" "-j=3" "--clang-tidy")))
